*git-arglist.txt*  Git helpers for modifying the arglist.

Author:  Joe Ellis
License: Same terms as Vim itself (see |license|)

INTRODUCTION                                    *git-arglist*

This plugin adds helper commands for modifying the arglist based on the
current Git repository.

COMMANDS                                        *git-arglist-commands*

                                                *:ArgsTreeish*
:ArgsTreeish {treeish} {pathspec}

Set the arglist to the files described by {pathspec} that are created/modified
by {treeish} (with respect to its parent).

Both {treeish} and {pathspec} may be omitted. If {treeish} is omitted, `HEAD`
will be used. If {pathspec} is omitted, all created/modified files will be
added to the arglist.

                                                *:ArglTreeish*
:ArglTreeish {treeish} {pathspec}

Same as |:ArgsTreeish|, but use the local arglist.

                                                *:ArgAddTreeish*
:ArgAddTreeish {treeish} {pathspec}

Add the files described by {pathspec} that are created/modified by {treeish}
(with respect to its parent) to the arglist. In other words, do the same thing
as |:ArgsTreeish| and |:ArglTreeish|, but add to the arglist rather than
modify it.

                                                *:ArgsDiff*
:ArgsDiff {pathspec}

Set the arglist to the files described by {pathspec} that are modified in the
working tree.

{pathspec} may be omitted. If {pathspec} is omitted, all modified files will
be added to the arglist.

                                                *:ArglDiff*
:ArglDiff {pathspec}

Same as |:ArgsDiff|, but use the local arglist.

                                                *:ArgAddDiff*
:ArgAddDiff {pathspec}

Add the files described by {pathspec} that are modified in the working tree to
the arglist. In other words, do the same thing as |:ArgsDiff| and |:ArglDiff|,
but add to the arglist rather than modify it.

                                                *:ArgsUntracked*
:ArgsUntracked {pathspec}

Set the arglist to the untracked files described by {pathspec}.

{pathspec} may be omitted. If {pathspec} is omitted all untracked files will
be added to the arglist. Use with caution if your build directory lives inside
your Git tree!

                                                *:ArglUntracked*
:ArglUntracked {pathspec}

Same as |:ArglUntracked|, but use the local arglist. Use with caution if your
build directory lives inside your Git tree!

                                                *:ArgAddUntracked*
:ArgAddUntracked {pathspec}

Add the untracked files described by {pathspec} to the arglist. In other
words, do the same thing as |:ArgsUntracked| and |:ArglUntracked|, but add to
the arglist rather than modify it. Use with caution if your build directory
lives inside your Git tree!

                                                *:ArgsStage*
:ArgsStage {pathspec}

Set the arglist to the files described by {pathspec} that are modified in the
stage.

{pathspec} may be omitted. If {pathspec} is omitted all staged files will be
added to the arglist.

                                                *:ArglStage*
:ArglStage {pathspec}

Same as |:ArglStage|, but use the local arglist.

                                                *:ArgAddStage*
:ArglStage {pathspec}

Add the files described by {pathspec} that are modified in the stage to the
arglist. In other words, do the same thing as |:ArgsStage| and |:ArglStage|,
but add to the arglist rather than modifying it.

EXAMPLE WORKFLOW                                *git-arglist-example-workflow*

I currently work on LLVM. One thing that I have found this plugin particularly
useful for is code review. When I'm doing a code review, I like to have the
modified/added source files open in one Vim tab, and the modified/added tests
open in another. To achieve this, after creating a local copy of a patch, I
use:
>
    :ArglTreeish HEAD :!llvm/test
    :tabnew +ArglTreeish\ HEAD\ llvm/test
<
The first command sets the local arglist of the current window to all of the
modified/added files that are not in the `llvm/test` tree. The second command
creates a new tab, and sets the local arglist for the new window to be the
modified/added tests inside the `llvm/test` tree.

Having the tests in a local arglist like this is super useful because it
allows me to run them all using Vim's built-in terminal. I have the following
mapping in my vimrc:
>
    tnoremap <expr> ;## expand("##")
<
... so that typing `;##` inside of a terminal window expands to the files in
the arglist. Therefore, if I want to run all of the tests, I can open a
terminal window and type something like:
>
    llvm-lit ;##
<
... which will be expanded to the full names of the test files!

ISSUES                                          *git-arglist-issues*

- The commands above may not function correctly if your current working
  directory is symlink to a subdirectory within the Git respository.

 vim:tw=78:ts=8:ft=help:norl:
