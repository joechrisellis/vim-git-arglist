*git-arglist.txt*  Git helpers for manipulating the arglist.

Author:  Joe Ellis
License: Same terms as Vim itself (see |license|)


INTRODUCTION                                    *git-arglist*

This plugin adds helper commands for manipulating the arglist based on the
current Git repository.


COMMANDS                                        *git-arglist-commands*

The plugin provides a collection of commands for manipulating the arglist
based on the current Git repository. Where possible, these commands try to
remain faithful to the semantics of the standard Vim builtin commands for
arglist manipulation.

There are currently four main contexts:

- Treeish commands, which modify the arglist based on a treeish (for example,
  a commit). |git-arglist-treeish-commands| for more information.

- Diff commands, which modify the arglist based on files containing unstaged
  changes in the working tree. |git-arglist-diff-commands| for more
  information.

- Untracked commands, which modify the arglist based on untracked files in the
  working tree. |git-arglist-untracked-commands| for more information.

- Stage commands, which modify the arglist based on files containing staged
  changes. |git-arglist-stage-commands| for more information.

For each of these contexts, the following variants exist:

- |:Args...|, which works like the |:args| builtin command.

- |:Argl...|, which works like the |:argl| builtin command.

- |:ArgAdd...|, which works like the |:argadd| builtin command.

- |:ArgDelete...|, which works like the |:argdelete| builtin command.

- |:ArgEdit...|, which works like the |:argedit| builtin command.


TREEISH COMMANDS                                *git-arglist-treeish-commands*

                                                *:ArgsTreeish*
:ArgsTreeish[!] {treeish} {pathspec}

Set the arglist to the files described by {pathspec} that are created/modified
by {treeish} (with respect to its parent).

Both {treeish} and {pathspec} may be omitted. If {treeish} is omitted, `HEAD`
will be used. If {pathspec} is omitted, all created/modified files will be
added to the arglist.

                                                *:ArglTreeish*
:ArglTreeish[!] {treeish} {pathspec}

Same as |:ArgsTreeish|, but use the local arglist.

                                                *:ArgAddTreeish*
:ArgAddTreeish {treeish} {pathspec}

Same as |:ArgsTreeish|, but add to the arglist rather than setting it.

                                                *:ArgDeleteTreeish*
:ArgDeleteTreeish {treeish} {pathspec}

Same as |:ArgsTreeish|, but delete from the arglist rather than setting it.

                                                *:ArgEditTreeish*
:ArgEditTreeish[!] {treeish} {pathspec}

Same as |:ArgAddTreeish|, but also edit the files.


DIFF COMMANDS                                   *git-arglist-diff-commands*

                                                *:ArgsDiff*
:ArgsDiff[!] {pathspec}

Set the arglist to the files described by {pathspec} that are modified in the
working tree.

{pathspec} may be omitted. If {pathspec} is omitted, all modified files will
be added to the arglist.

                                                *:ArglDiff*
:ArglDiff[!] {pathspec}

Same as |:ArgsDiff|, but use the local arglist.

                                                *:ArgAddDiff*
:ArgAddDiff {pathspec}

Same as |:ArgsDiff|, but add to the arglist rather than setting it.

                                                *:ArgDeleteDiff*
:ArgDeleteDiff {pathspec}

Same as |:ArgsDiff|, but delete from the arglist rather than setting it.

                                                *:ArgEditDiff*
:ArgEditDiff[!] {pathspec}

Same as |:ArgAddDiff|, but also edit the files.


UNTRACKED COMMANDS                              *git-arglist-untracked-commands*

WARNING: If you don't specify a {pathspec} for the commands below, they will
         operate on all of the untracked files in your working tree. So use
         with with caution if your build directory lives inside your Git tree.

                                                *:ArgsUntracked*
:ArgsUntracked[!] {pathspec}

Set the arglist to the untracked files described by {pathspec}.

{pathspec} may be omitted. If {pathspec} is omitted all untracked files will
be added to the arglist.

                                                *:ArglUntracked*
:ArglUntracked[!] {pathspec}

Same as |:ArglUntracked|, but use the local arglist.

                                                *:ArgAddUntracked*
:ArgAddUntracked {pathspec}

Same as |:ArgsUntracked|, but add to the arglist rather than setting it.

                                                *:ArgDeleteUntracked*
:ArgDeleteUntracked {pathspec}

Same as |:ArgsUntracked|, but delete from the arglist rather than setting it.

                                                *:ArgEditUntracked*
:ArgEditUntracked[!] {pathspec}

Same as |:ArgAddUntracked|, but also edit the files.


STAGE COMMANDS                                  *git-arglist-stage-commands*

                                                *:ArgsStage*
:ArgsStage[!] {pathspec}

Set the arglist to the files described by {pathspec} that are modified in the
stage.

{pathspec} may be omitted. If {pathspec} is omitted all staged files will be
added to the arglist.

                                                *:ArglStage*
:ArglStage[!] {pathspec}

Same as |:ArglStage|, but use the local arglist.

                                                *:ArgAddStage*
:ArgAddStage {pathspec}

Same as |:ArgsStage|, but add to the arglist rather than setting it.

                                                *:ArgDeleteStage*
:ArgDeleteStage {pathspec}

Same as |:ArgsStage|, but delete from the arglist rather than setting it.

                                                *:ArgEditStage*
:ArgEditStage[!] {pathspec}

Same as |:ArgAddStage|, but also edit the files.


VIMSCRIPT FUNCTIONS                             *git-arglist-vimscript-functions*

The plugin exposes the following Vimscript functions:

- `TreeishFiles({treeish}, {pathspec}...)` -- returns a list of the files
  described by {pathspec} that are created/modified by {treeish} (with respect
  to its parent).

- `DiffFiles({pathspec}...)` -- returns a list of the files described by
  {pathspec} that are modified in the working tree.

- `UntrackedFiles({pathspec}...)` -- returns a list of the untracked files
  described by {pathspec}.

- `StageFiles({pathspec}...)` -- returns a list of the files described by
  {pathspec} that are modified in the stage.

These are exposed for flexibility. You can use them in backtick expansion (see
|`=|), which opens up a world of possibilities. Be creative!


EXAMPLE WORKFLOW                                *git-arglist-example-workflow*

I currently work on LLVM. One thing that I have found this plugin particularly
useful for is code review. When I'm doing a code review, I like to have the
modified/added source files open in one Vim tab, and the modified/added tests
open in another. To achieve this, after creating a local copy of a patch, I
use:
>
    :ArglTreeish HEAD :!{llvm,clang}/test
    :tabnew +ArglTreeish\ HEAD\ {llvm,clang}/test
<
The first command sets the local arglist of the current window to all of the
modified/added files that are not in the `llvm/test` or `clang/test` trees.
The second command creates a new tab, and sets the local arglist for the new
window to be the modified/added tests inside the `llvm/test` and `clang/test`
trees.

Having the tests in a local arglist like this is super useful because it
allows me to run them all using Vim's built-in terminal. I have the following
mapping in my vimrc:
>
    tnoremap <expr> ;## expand("##")
<
... so that typing `;##` inside of a terminal window expands to the files in
the arglist. Therefore, if I want to run all of the tests, I can open a
terminal window and type something like:
>
    llvm-lit ;##
<
... which will be expanded to the full names of the test files!


ISSUES                                          *git-arglist-issues*

- The commands above may not function correctly if your current working
  directory is symlink to a subdirectory within the Git repository.

 vim:tw=78:ts=8:ft=help:norl:
