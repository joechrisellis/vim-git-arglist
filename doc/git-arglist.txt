*git-arglist.txt*  Git helpers for manipulating the arglist.

Author:  Joe Ellis
License: Same terms as Vim itself (see |license|)


INTRODUCTION                                    *git-arglist*

This plugin adds helper commands for manipulating the arglist based on the
current Git repository.


COMMANDS                                        *git-arglist-commands*

The plugin provides a collection of commands for manipulating the arglist
based on the current Git repository. Where possible, these commands try to
remain faithful to the semantics of the standard Vim builtin commands for
arglist manipulation.

There are currently six main contexts:

- Treeish commands, which modify the arglist based on a treeish (for example,
  a commit). |git-arglist-treeish-commands| for more information.

- Diffed commands, which modify the arglist based on files containing unstaged
  changes in the working tree (or based on a Git revision/range specifier).
  |git-arglist-diffed-commands| for more information.

- Tracked commands, which modify the arglist based on files tracked by Git.
  |git-arglist-tracked-commands| for more information.

- Untracked commands, which modify the arglist based on untracked files in the
  working tree. |git-arglist-untracked-commands| for more information.

- Staged commands, which modify the arglist based on files containing staged
  changes. |git-arglist-staged-commands| for more information.

- Conflicted commands, which modify the arglist based on conflicted files in
  the working tree. |git-arglist-conflicted-commands| for more information.

For each of these contexts, the following variants exist:

- |:Args...|, which works like the |:args| builtin command.

- |:Argl...|, which works like the |:argl| builtin command.

- |:ArgAdd...|, which works like the |:argadd| builtin command.

- |:ArgDelete...|, which works like the |:argdelete| builtin command.

- |:ArgEdit...|, which works like the |:argedit| builtin command.

                                                *git-arglist-bang*
You can give a bang [!] to some of the command variants. This causes the
plugin to use the corresponding builtin command with a bang.

                                                *git-arglist-pathspec-behaviour*
Commands accept an optional pathspec parameter. Specifying this parameter
allows you to whittle down targeted files. If this parameter is omitted, the
default behaviour is for no filtering to be performed and for all of the files
inside the repository to be considered.

For example, to set the arglist to all tracked files in the repository, use:
>
    :ArgsTracked
<
... but to set the arglist to only the tracked files inside the `foo`
subdirectory:
>
    :ArgsTracked foo
<

TREEISH COMMANDS                                *git-arglist-treeish-commands*

                                                *:ArgsTreeish*
:ArgsTreeish[!] {treeish} {pathspec}

Set the arglist to the files described by {pathspec} that are created/modified
by {treeish} (with respect to its parent(s)).

Both {treeish} and {pathspec} may be omitted. If {treeish} is omitted, `HEAD`
will be used. If {pathspec} is omitted, all created/modified files in the
repository will be added to the arglist.

                                                *:ArglTreeish*
:ArglTreeish[!] {treeish} {pathspec}

Same as |:ArgsTreeish|, but use the local arglist.

                                                *:ArgAddTreeish*
:ArgAddTreeish {treeish} {pathspec}

Same as |:ArgsTreeish|, but add to the arglist rather than setting it.

                                                *:ArgDeleteTreeish*
:ArgDeleteTreeish {treeish} {pathspec}

Same as |:ArgsTreeish|, but delete from the arglist rather than setting it.

                                                *:ArgEditTreeish*
:ArgEditTreeish[!] {treeish} {pathspec}

Same as |:ArgAddTreeish|, but also edit the files.


DIFFED COMMANDS                                 *git-arglist-diffed-commands*

                                                *:ArgsDiffed*
:ArgsDiffed[!] {gitrevision} {pathspec}

Set the arglist to the files described by {pathspec} that are listed as
touched by the revision/range specifier {gitrevision}.

Both {gitrevision} and {pathspec} may be omitted. If {gitrevision} is omitted,
`HEAD` will be used (corresponding to the files containing unstaged changes in
the working tree). If {pathspec} is omitted, all files in the repository
described by {gitrevision} will will be added to the arglist.

                                                *:ArglDiffed*
:ArglDiffed[!] {gitrevision} {pathspec}

Same as |:ArgsDiffed|, but use the local arglist.

                                                *:ArgAddDiffed*
:ArgAddDiffed {gitrevision} {pathspec}

Same as |:ArgsDiffed|, but add to the arglist rather than setting it.

                                                *:ArgDeleteDiffed*
:ArgDeleteDiffed {gitrevision} {pathspec}

Same as |:ArgsDiffed|, but delete from the arglist rather than setting it.

                                                *:ArgEditDiffed*
:ArgEditDiffed[!] {gitrevision} {pathspec}

Same as |:ArgAddDiffed|, but also edit the files.


TRACKED COMMANDS                                *git-arglist-tracked-commands*

                                                *:ArgsTracked*
:ArgsTracked[!] {pathspec}

Set the arglist to the tracked files described by {pathspec}.

{pathspec} may be omitted. If {pathspec} is omitted all tracked files in the
repository will be added to the arglist.

                                                *:ArglTracked*
:ArglTracked[!] {pathspec}

Same as |:ArgsTracked|, but use the local arglist.

                                                *:ArgAddTracked*
:ArgAddTracked {pathspec}

Same as |:ArgsTracked|, but add to the arglist rather than setting it.

                                                *:ArgDeleteTracked*
:ArgDeleteTracked {pathspec}

Same as |:ArgsTracked|, but delete from the arglist rather than setting it.

                                                *:ArgEditTracked*
:ArgEditTracked[!] {pathspec}

Same as |:ArgAddTracked|, but also edit the files.


UNTRACKED COMMANDS                              *git-arglist-untracked-commands*

WARNING: If you don't specify a {pathspec} for the commands below, they will
         capture all of the untracked files in your working tree. Use with
         with caution if your build directory lives inside your working tree!

                                                *:ArgsUntracked*
:ArgsUntracked[!] {pathspec}

Set the arglist to the untracked files described by {pathspec}.

{pathspec} may be omitted. If {pathspec} is omitted all untracked files in the
repository will be added to the arglist.

                                                *:ArglUntracked*
:ArglUntracked[!] {pathspec}

Same as |:ArgsUntracked|, but use the local arglist.

                                                *:ArgAddUntracked*
:ArgAddUntracked {pathspec}

Same as |:ArgsUntracked|, but add to the arglist rather than setting it.

                                                *:ArgDeleteUntracked*
:ArgDeleteUntracked {pathspec}

Same as |:ArgsUntracked|, but delete from the arglist rather than setting it.

                                                *:ArgEditUntracked*
:ArgEditUntracked[!] {pathspec}

Same as |:ArgAddUntracked|, but also edit the files.


STAGED COMMANDS                                 *git-arglist-staged-commands*

                                                *:ArgsStaged*
:ArgsStaged[!] {pathspec}

Set the arglist to the files described by {pathspec} that contain changes in
the stage.

{pathspec} may be omitted. If {pathspec} is omitted, all files containing
staged changes in the repository will be added to the arglist.

                                                *:ArglStaged*
:ArglStaged[!] {pathspec}

Same as |:ArgsStaged|, but use the local arglist.

                                                *:ArgAddStaged*
:ArgAddStaged {pathspec}

Same as |:ArgsStaged|, but add to the arglist rather than setting it.

                                                *:ArgDeleteStaged*
:ArgDeleteStaged {pathspec}

Same as |:ArgsStaged|, but delete from the arglist rather than setting it.

                                                *:ArgEditStaged*
:ArgEditStaged[!] {pathspec}

Same as |:ArgAddStaged|, but also edit the files.


CONFLICTED COMMANDS                             *git-arglist-conflicted-commands*

                                                *:ArgsConflicted*
:ArgsConflicted[!] {pathspec}

Set the arglist to the files described by {pathspec} that are conflicted in
the working tree.

{pathspec} may be omitted. If {pathspec} is omitted all files in the
repository containing conflicts will be added to the arglist.

                                                *:ArglConflicted*
:ArglConflicted[!] {pathspec}

Same as |:ArgsConflicted|, but use the local arglist.

                                                *:ArgAddConflicted*
:ArgAddConflicted {pathspec}

Same as |:ArgsConflicted|, but add to the arglist rather than setting it.

                                                *:ArgDeleteConflicted*
:ArgDeleteConflicted {pathspec}

Same as |:ArgsConflicted|, but delete from the arglist rather than setting it.

                                                *:ArgEditConflicted*
:ArgEditConflicted[!] {pathspec}

Same as |:ArgAddConflicted|, but also edit the files.


VIMSCRIPT FUNCTIONS                             *git-arglist-vimscript-functions*

The plugin exposes the following Vimscript functions:

- `TreeishFiles({treeish}, {pathspec}...)` -- returns a list of the files
  described by {pathspec} that are created/modified by {treeish} (with respect
  to its parent(s)).

- `DiffedFiles({gitrevision}, {pathspec}...)` -- returns a list of the files
  described by {pathspec} that are listed as touched by the revision/range
  specifier {gitrevision}.

- `TrackedFiles({pathspec}...)` -- returns a list of the tracked files
  described by {pathspec}.

- `UntrackedFiles({pathspec}...)` -- returns a list of the untracked files
  described by {pathspec}.

- `StagedFiles({pathspec}...)` -- returns a list of the files described by
  {pathspec} that contain changes in the stage.

- `ConflictedFiles({pathspec}...)` -- returns a list of the files described by
  {pathspec} that are conflicted in the working tree.

These are exposed for flexibility. You can use them in backtick expansion (see
|`=|), which opens up a world of possibilities. Be creative!


EXAMPLE WORKFLOW                                *git-arglist-example-workflow*

I will use the LLVM codebase as an example.

One thing that I have found this plugin particularly useful for is code
review. When I'm doing a code review, I like to have the modified/added source
files open in one Vim tab, and the modified/added tests open in another. To
achieve this, after creating a local copy of a patch, I use:
>
    :ArglTreeish HEAD :!{llvm,clang}/test
    :tabnew +ArglTreeish\ HEAD\ {llvm,clang}/test
<
The first command sets the local arglist of the current window to all of the
modified/added files that are not in the `llvm/test` or `clang/test` trees.
The second command creates a new tab, and sets the local arglist for the new
window to be the modified/added tests inside the `llvm/test` and `clang/test`
trees.

Having the tests in a local arglist like this is super useful because it
allows me to run them all using Vim's built-in terminal. I have the following
mapping in my vimrc:
>
    tnoremap <expr> ;## expand("##")
<
... so that typing `;##` inside of a terminal window expands to the files in
the arglist. Therefore, if I want to run all of the tests, I can open a
terminal window and type something like:
>
    llvm-lit ;##
<
... which will be expanded to the full names of the test files!


FAQ                                             *git-arglist-faq*

Q) Can I load diff hunks into the quickfix list with this plugin?
A) No. If you want to do that, a good option is the |fugitive| plugin by Tim
   Pope.

    https://github.com/tpope/vim-fugitive

   You can jump to diff hunks via the quickfix list with that plugin by using
   the `:Git difftool` command.


ISSUES                                          *git-arglist-issues*

- The commands above may not function correctly if your current working
  directory is symlink to a subdirectory within the Git repository.

 vim:tw=78:ts=8:ft=help:norl:
